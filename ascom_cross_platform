#!/bin/bash

# Define the paths (absolute paths)
FRONTEND_DIR=$(pwd)/frontend
BACKEND_DIR=$(pwd)/backend

# Function to handle errors
handle_error() {
    echo "$1"
    exit 1
}

# Cross-platform URL opener
open_url() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "$1"  # macOS
    else
        xdg-open "$1" || echo "Failed to open $1 in the browser"
    fi
}

# Install dependencies in the frontend
echo "Navigating to frontend directory..."
cd "$FRONTEND_DIR" || handle_error "Frontend directory not found!"
echo "Installing frontend dependencies..."
npm install || handle_error "Frontend npm install failed!"

# Install dotenv in the backend
echo "Navigating to backend directory..."
cd "$BACKEND_DIR" || handle_error "Backend directory not found!"
echo "Ensuring dotenv is installed..."
npm install dotenv || handle_error "Backend npm install dotenv failed!"

# Start the backend server in the background
echo "Starting backend server..."
nohup node server.js > output.log 2>&1 &  # Running backend server in the background
if [ $? -ne 0 ]; then
    handle_error "Backend server failed to start!"
fi

# Wait until the backend is up before opening the browser
echo "Waiting for backend server to start..."
while ! nc -z localhost 3001; do
  sleep 1
done
echo "Backend is up, opening in the browser..."
open_url "http://localhost:3001"

# Open the specific backend endpoint in the browser
echo "Opening backend API patients endpoint in the browser..."
open_url "http://localhost:3001/api/patients"

# Start the frontend server
echo "Navigating back to frontend directory..."
cd "$FRONTEND_DIR" || handle_error "Frontend directory not found again!"
echo "Starting frontend..."
npm start || handle_error "Frontend npm start failed!"

# Wait until the frontend is up before opening the browser
echo "Waiting for frontend server to start..."
while ! nc -z localhost 3000; do
  sleep 1
done
echo "Frontend is up, opening in the browser..."
open_url "http://localhost:3000"
